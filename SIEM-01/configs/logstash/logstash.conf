# Logstash Pipeline Configuration for SIEM

input {
  # Beats (Winlogbeat, Filebeat, etc.)
  beats {
    port => 5044
    ssl => false
    type => "beats"
  }

  # Wazuh
  beats {
    port => 5045
    ssl => false
    type => "wazuh"
  }

  # Syslog
  syslog {
    port => 5514
    type => "syslog"
  }

  # JSON logs via HTTP
  http {
    port => 8080
    type => "json_logs"
  }
}

filter {
  # Process Wazuh alerts
  if [type] == "wazuh" {
    # Parse Wazuh JSON
    json {
      source => "message"
    }

    # Add Wazuh specific fields
    mutate {
      add_field => { "[@metadata][index]" => "wazuh-alerts-%{+YYYY.MM.dd}" }
      add_tag => ["wazuh"]
    }

    # Parse Wazuh timestamp
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }

    # Enrich with GeoIP for source IPs
    if [data][srcip] {
      geoip {
        source => "[data][srcip]"
        target => "[geoip][src]"
      }
    }

    if [data][dstip] {
      geoip {
        source => "[data][dstip]"
        target => "[geoip][dst]"
      }
    }
  }

  # Process Windows Event Logs (Winlogbeat)
  if [type] == "beats" and [agent][type] == "winlogbeat" {
    # Windows Event Log processing
    mutate {
      add_field => { "[@metadata][index]" => "winlogbeat-%{+YYYY.MM.dd}" }
      add_tag => ["windows", "eventlog"]
    }

    # Parse Windows Event ID for categorization
    if [winlog][event_id] {
      mutate {
        add_field => { "windows_event_category" => "unknown" }
      }

      # Security Events
      if [winlog][event_id] in [4624, 4625, 4648, 4672, 4720, 4722, 4726, 4728, 4732, 4756] {
        mutate {
          replace => { "windows_event_category" => "security" }
        }
      }

      # Process Events
      if [winlog][event_id] in [4688, 4689] {
        mutate {
          replace => { "windows_event_category" => "process" }
        }
      }

      # Network Events
      if [winlog][event_id] in [5156, 5158] {
        mutate {
          replace => { "windows_event_category" => "network" }
        }
      }
    }

    # Extract source IP from logon events
    if [winlog][event_data][IpAddress] and [winlog][event_data][IpAddress] != "-" {
      geoip {
        source => "[winlog][event_data][IpAddress]"
        target => "[geoip][logon]"
      }
    }
  }

  # Process Filebeat logs
  if [type] == "beats" and [agent][type] == "filebeat" {
    mutate {
      add_field => { "[@metadata][index]" => "filebeat-%{+YYYY.MM.dd}" }
      add_tag => ["filebeat"]
    }

    # Parse common log formats
    if [log][file][path] =~ /nginx/ or [log][file][path] =~ /apache/ {
      grok {
        match => { "message" => "%{COMBINEDAPACHELOG}" }
        tag_on_failure => ["_grokparsefailure_apache"]
      }

      if [clientip] {
        geoip {
          source => "clientip"
          target => "[geoip][client]"
        }
      }
    }
  }

  # Common enrichment for all logs
  # Add hostname resolution
  dns {
    reverse => ["[src_ip]"]
    action => "append"
    nameserver => ["8.8.8.8", "1.1.1.1"]
  }

  # Remove unwanted fields
  mutate {
    remove_field => ["[agent][ephemeral_id]", "[ecs][version]", "[log][offset]"]
  }

  # Add severity based on log level or event type
  if [log][level] {
    translate {
      field => "[log][level]"
      destination => "[severity_score]"
      dictionary => {
        "emergency" => "8"
        "alert" => "7"
        "critical" => "6"
        "error" => "5"
        "warning" => "4"
        "notice" => "3"
        "info" => "2"
        "debug" => "1"
      }
      fallback => "2"
    }
  }
}

output {
  # Debug output (comment out in production)
  stdout {
    codec => rubydebug
  }

  # Elasticsearch output
  elasticsearch {
    hosts => ["https://elasticsearch:9200"]
    user => "logstash_system"
    password => "${LOGSTASH_SYSTEM_PASSWORD}"
    ssl => true
    cacert => "/usr/share/logstash/certs/ca/ca.crt"
    ssl_certificate_verification => true
    index => "%{[@metadata][index]}"
    template_name => "siem-template"
    template_pattern => ["wazuh-*", "winlogbeat-*", "filebeat-*", "metricbeat-*"]
    template => {
      "index_patterns" => ["wazuh-*", "winlogbeat-*", "filebeat-*", "metricbeat-*"]
      "settings" => {
        "number_of_shards" => 1
        "number_of_replicas" => 0
        "index.refresh_interval" => "5s"
        "index.max_result_window" => 50000
      }
      "mappings" => {
        "properties" => {
          "@timestamp" => { "type" => "date" }
          "geoip" => {
            "properties" => {
              "location" => { "type" => "geo_point" }
            }
          }
          "severity_score" => { "type" => "integer" }
        }
      }
    }
  }

  # Send high severity events to dead letter queue for investigation
  if [severity_score] and [severity_score] >= 6 {
    file {
      path => "/usr/share/logstash/data/critical_events.log"
      codec => json
    }
  }
}